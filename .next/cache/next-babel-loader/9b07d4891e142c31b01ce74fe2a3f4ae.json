{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nimport fetch from \"node-fetch\";\n\nconst base64 = require(\"js-base64\").Base64;\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\"); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport async function getAllPostIds() {\n  // const fileNames = fs.readdirSync(postsDirectory)\n  const repoUrl = \"https://api.github.com/repos/deatiger/nextjs-tutorial-torasemi/contents/posts\";\n  const response = await fetch(repoUrl);\n  const files = await response.json();\n  const fileNames = files.map(file => file.name); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  // const fullPath = path.join(postsDirectory, `${id}.md`)\n  // const fileContents = fs.readFileSync(fullPath, 'utf8')\n  const repoUrl = `https://api.github.com/repos/deatiger/nextjs-tutorial-torasemi/contents/posts/${id}.md`;\n  const response = await fetch(repoUrl);\n  const file = await response.json();\n  const fileContents = base64.decode(file.content); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/yoko/Desktop/nextJS/lib/posts.js"],"names":["fs","path","matter","remark","html","fetch","base64","require","Base64","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","repoUrl","response","files","json","file","name","params","getPostData","decode","content","processedContent","use","contentHtml","toString"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nimport fetch from \"node-fetch\";\nconst base64 = require(\"js-base64\").Base64;\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\n\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\");\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data,\n    };\n  });\n  // Sort posts by date\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport async function getAllPostIds() {\n  // const fileNames = fs.readdirSync(postsDirectory)\n\n  const repoUrl =\n    \"https://api.github.com/repos/deatiger/nextjs-tutorial-torasemi/contents/posts\";\n  const response = await fetch(repoUrl);\n  const files = await response.json();\n  const fileNames = files.map((file) => file.name);\n\n  // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\"),\n      },\n    };\n  });\n}\n\nexport async function getPostData(id) {\n  // const fullPath = path.join(postsDirectory, `${id}.md`)\n  // const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  const repoUrl = `https://api.github.com/repos/deatiger/nextjs-tutorial-torasemi/contents/posts/${id}.md`;\n  const response = await fetch(repoUrl);\n  const file = await response.json();\n  const fileContents = base64.decode(file.content);\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents);\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}